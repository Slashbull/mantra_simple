#!/usr/bin/env python3
"""
M.A.N.T.R.A. ELITE DASHBOARD SYSTEM
===================================
The definitive stock intelligence platform.
Modular, fast, powerful, beautiful.
"""

# ============================================================================
# FILE: dashboard_config.py
# ============================================================================
"""Configuration and constants for the MANTRA dashboard system"""

DASHBOARD_CONFIG = {
    "name": "M.A.N.T.R.A. Elite",
    "version": "3.0.0",
    "theme": {
        "primary": "#1a73e8",
        "success": "#0f9d58",
        "warning": "#f9ab00",
        "danger": "#ea4335",
        "background": "#0e1117",
        "surface": "#1e1e1e",
        "text": "#ffffff"
    },
    "refresh_interval": 300,  # 5 minutes
    "max_display_rows": 500,
    "default_filters": {
        "tag": "Buy",
        "min_score": 70,
        "regime": "balanced"
    }
}

COLUMN_DEFINITIONS = {
    "ticker": {"display": "Symbol", "width": 80, "frozen": True},
    "company_name": {"display": "Company", "width": 200},
    "tag": {"display": "Signal", "width": 80, "color_map": {"Buy": "🟢", "Watch": "🟡", "Avoid": "🔴"}},
    "final_score": {"display": "Score", "width": 80, "format": "{:.1f}", "type": "progress"},
    "price": {"display": "Price", "width": 100, "format": "₹{:.2f}"},
    "target_price": {"display": "Target", "width": 100, "format": "₹{:.2f}"},
    "upside_pct": {"display": "Upside%", "width": 80, "format": "{:.1f}%", "color": "gradient"},
    "edge_types": {"display": "Edges", "width": 250},
    "vol_ratio_1d_90d": {"display": "Vol×", "width": 60, "format": "{:.1f}x"},
    "sector": {"display": "Sector", "width": 150},
    "ret_1d": {"display": "1D%", "width": 60, "format": "{:+.1f}%", "color": "sentiment"},
    "ret_7d": {"display": "7D%", "width": 60, "format": "{:+.1f}%", "color": "sentiment"}
}

# ============================================================================
# FILE: ui_components.py
# ============================================================================
"""Reusable UI components for consistent, beautiful interface"""

import streamlit as st
import plotly.graph_objects as go
import pandas as pd
from typing import List, Dict, Any, Optional

class UIComponents:
    """Elite UI components for MANTRA dashboard"""
    
    @staticmethod
    def inject_theme():
        """Inject the ultimate theme and styling"""
        st.markdown("""
        <style>
        /* MANTRA Elite Theme */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        * {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        }
        
        /* Hide Streamlit branding */
        #MainMenu, .stDeployButton, footer {visibility: hidden;}
        
        /* Background gradient */
        .stApp {
            background: linear-gradient(135deg, #0e1117 0%, #1a1a2e 100%);
        }
        
        /* Header styling */
        .main-header {
            background: linear-gradient(90deg, #1a73e8 0%, #0f9d58 100%);
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            margin-bottom: 30px;
            box-shadow: 0 4px 20px rgba(26, 115, 232, 0.3);
        }
        
        /* Metric cards */
        [data-testid="metric-container"] {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 8px;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }
        
        [data-testid="metric-container"]:hover {
            background: rgba(255, 255, 255, 0.08);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        
        /* Dataframe styling */
        .stDataFrame {
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }
        
        /* Buttons */
        .stButton > button {
            background: linear-gradient(90deg, #1a73e8 0%, #1557b0 100%);
            color: white;
            border: none;
            padding: 10px 24px;
            border-radius: 6px;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .stButton > button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(26, 115, 232, 0.4);
        }
        
        /* Tabs */
        .stTabs [data-baseweb="tab-list"] {
            background: rgba(255, 255, 255, 0.05);
            padding: 5px;
            border-radius: 10px;
        }
        
        .stTabs [data-baseweb="tab"] {
            color: rgba(255, 255, 255, 0.7);
            font-weight: 600;
            padding: 10px 20px;
            background: transparent;
        }
        
        .stTabs [aria-selected="true"] {
            background: #1a73e8;
            color: white;
            border-radius: 6px;
        }
        
        /* Select boxes */
        .stSelectbox > div > div {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 6px;
        }
        
        /* Info boxes */
        .info-box {
            background: rgba(26, 115, 232, 0.1);
            border: 1px solid rgba(26, 115, 232, 0.3);
            border-radius: 8px;
            padding: 15px;
            margin: 10px 0;
        }
        
        /* Success boxes */
        .success-box {
            background: rgba(15, 157, 88, 0.1);
            border: 1px solid rgba(15, 157, 88, 0.3);
            border-radius: 8px;
            padding: 15px;
            margin: 10px 0;
        }
        
        /* Quick stats bar */
        .quick-stats {
            background: rgba(255, 255, 255, 0.03);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid rgba(255, 255, 255, 0.05);
        }
        
        /* Floating elements */
        .floating-card {
            animation: float 3s ease-in-out infinite;
        }
        
        @keyframes float {
            0% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
            100% { transform: translateY(0px); }
        }
        
        /* Glassmorphism effects */
        .glass {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 10px;
        }
        
        /* Responsive improvements */
        @media (min-width: 1200px) {
            .block-container {
                max-width: 1400px;
            }
        }
        </style>
        """, unsafe_allow_html=True)
    
    @staticmethod
    def render_header():
        """Render the main header with branding"""
        st.markdown("""
        <div class="main-header">
            <h1 style="color: white; margin: 0; font-size: 36px; font-weight: 700;">
                🚀 M.A.N.T.R.A. ELITE
            </h1>
            <p style="color: rgba(255, 255, 255, 0.9); margin: 5px 0 0 0; font-size: 16px;">
                Market Analysis & Neural Trading Intelligence | Real Alpha, Real Time
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    @staticmethod
    def render_quick_stats(df: pd.DataFrame, filtered_df: pd.DataFrame) -> None:
        """Render the quick stats bar"""
        total = len(df)
        filtered = len(filtered_df)
        buy_signals = len(filtered_df[filtered_df['tag'] == 'Buy']) if 'tag' in filtered_df.columns else 0
        avg_score = filtered_df['final_score'].mean() if 'final_score' in filtered_df.columns and not filtered_df.empty else 0
        edges = filtered_df['has_edge'].sum() if 'has_edge' in filtered_df.columns else 0
        
        st.markdown('<div class="quick-stats">', unsafe_allow_html=True)
        cols = st.columns(5)
        
        metrics = [
            ("📊 Universe", f"{total:,}", None),
            ("🎯 Filtered", f"{filtered:,}", f"{filtered/total*100:.1f}%"),
            ("🟢 Buy Signals", f"{buy_signals}", f"{buy_signals/max(filtered,1)*100:.1f}%"),
            ("📈 Avg Score", f"{avg_score:.1f}", None),
            ("⚡ Edge Signals", f"{edges}", None)
        ]
        
        for col, (label, value, delta) in zip(cols, metrics):
            with col:
                st.metric(label, value, delta)
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    @staticmethod
    def create_mini_chart(data: pd.Series, height: int = 60) -> go.Figure:
        """Create a minimalist mini chart"""
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            y=data,
            mode='lines',
            line=dict(color='#1a73e8', width=2),
            fill='tozeroy',
            fillcolor='rgba(26, 115, 232, 0.1)',
            showlegend=False,
            hoverinfo='skip'
        ))
        
        fig.update_layout(
            height=height,
            margin=dict(l=0, r=0, t=0, b=0),
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            xaxis=dict(visible=False),
            yaxis=dict(visible=False)
        )
        return fig

# ============================================================================
# FILE: data_pipeline.py
# ============================================================================
"""Optimized data pipeline for ultra-fast processing"""

import pandas as pd
import numpy as np
from typing import Tuple, Dict, Any
import streamlit as st
from datetime import datetime

class DataPipeline:
    """High-performance data pipeline for MANTRA"""
    
    @staticmethod
    @st.cache_data(ttl=300, show_spinner=False)
    def load_and_process_all(regime: str = "balanced") -> Tuple[pd.DataFrame, pd.DataFrame, Dict]:
        """Load and process all data with intelligent caching"""
        try:
            # Import all processing modules
            from core_system_foundation import load_and_process
            from signal_engine import run_signal_engine
            from decision_engine import run_decision_engine
            from anomaly_detector import run_anomaly_detector
            from sector_mapper import run_sector_mapper
            from edge_finder import compute_edge_signals
            
            # Load base data
            stocks_df, sector_df, summary = load_and_process()
            
            # Run full pipeline
            df = run_signal_engine(stocks_df, sector_df, regime=regime)
            df = run_decision_engine(df)
            df = run_anomaly_detector(df)
            df = compute_edge_signals(df)
            
            # Add computed columns for UI
            df = DataPipeline._add_ui_columns(df)
            
            # Get sector scores
            sector_scores = run_sector_mapper(sector_df)
            
            return df, sector_scores, summary
            
        except Exception as e:
            st.error(f"Pipeline error: {str(e)}")
            return pd.DataFrame(), pd.DataFrame(), {}
    
    @staticmethod
    def _add_ui_columns(df: pd.DataFrame) -> pd.DataFrame:
        """Add columns optimized for UI display"""
        # Priority score (composite ranking)
        if all(col in df.columns for col in ['final_score', 'edge_count', 'vol_ratio_1d_90d']):
            df['priority_score'] = (
                df['final_score'] * 0.6 +
                df['edge_count'].clip(0, 5) * 8 +
                np.log1p(df['vol_ratio_1d_90d']) * 10
            )
        
        # Quick action flag
        if 'tag' in df.columns and 'has_edge' in df.columns:
            df['action_required'] = (df['tag'] == 'Buy') & (df['has_edge'] == True)
        
        # Momentum indicator
        if all(col in df.columns for col in ['ret_1d', 'ret_7d', 'ret_30d']):
            df['momentum_score'] = (
                df['ret_1d'] * 0.5 +
                df['ret_7d'] * 0.3 +
                df['ret_30d'] * 0.2
            )
        
        return df

# ============================================================================
# FILE: dashboard_filters.py
# ============================================================================
"""Advanced filtering system with presets and smart defaults"""

import streamlit as st
import pandas as pd
from typing import Dict, Any, List

class DashboardFilters:
    """Smart filtering system for MANTRA dashboard"""
    
    # Preset filter configurations
    PRESETS = {
        "🎯 High Conviction": {
            "tag": "Buy",
            "min_score": 80,
            "has_edge": True,
            "min_volume_ratio": 1.5
        },
        "📈 Momentum Plays": {
            "tag": "Buy",
            "min_score": 70,
            "momentum_positive": True,
            "sort_by": "ret_7d"
        },
        "💎 Hidden Gems": {
            "tag": ["Buy", "Watch"],
            "min_score": 65,
            "max_market_cap": "Small",
            "has_edge": True
        },
        "🚨 Risk Alerts": {
            "tag": "Avoid",
            "anomaly": True,
            "sort_by": "anomaly_severity"
        },
        "🔥 Hot Sectors": {
            "sector_leaders": True,
            "min_sector_score": 80,
            "sort_by": "sector_score"
        },
        "⚡ Quick Wins": {
            "tag": "Buy",
            "upside_range": (10, 30),
            "time_horizon": "short"
        }
    }
    
    @staticmethod
    def render_filter_bar() -> Dict[str, Any]:
        """Render the smart filter bar"""
        filters = {}
        
        # Create columns for filter bar
        col1, col2, col3, col4, col5 = st.columns([2, 1, 1, 1, 1])
        
        with col1:
            # Preset selector
            preset = st.selectbox(
                "🎯 Quick Filters",
                options=["Custom"] + list(DashboardFilters.PRESETS.keys()),
                index=0
            )
            
            if preset != "Custom":
                filters.update(DashboardFilters.PRESETS[preset])
        
        with col2:
            # Tag filter
            filters['tag'] = st.selectbox(
                "Signal",
                options=["All", "Buy", "Watch", "Avoid"],
                index=1 if preset == "Custom" else 0
            )
        
        with col3:
            # Score filter
            filters['min_score'] = st.number_input(
                "Min Score",
                min_value=0,
                max_value=100,
                value=70 if preset == "Custom" else filters.get('min_score', 70),
                step=5
            )
        
        with col4:
            # Edge filter
            filters['edges_only'] = st.checkbox(
                "⚡ Edges",
                value=filters.get('has_edge', False)
            )
        
        with col5:
            # Anomaly filter
            filters['anomalies'] = st.checkbox(
                "🚨 Anomalies",
                value=filters.get('anomaly', False)
            )
        
        # Advanced filters (expandable)
        with st.expander("🔧 Advanced Filters"):
            adv_cols = st.columns(4)
            
            with adv_cols[0]:
                # Sector filter
                filters['sector'] = st.multiselect(
                    "Sectors",
                    options=st.session_state.get('available_sectors', []),
                    default=None
                )
            
            with adv_cols[1]:
                # Volume filter
                filters['min_volume'] = st.slider(
                    "Min Volume Ratio",
                    min_value=0.0,
                    max_value=5.0,
                    value=0.0,
                    step=0.5
                )
            
            with adv_cols[2]:
                # Upside filter
                filters['min_upside'] = st.number_input(
                    "Min Upside %",
                    min_value=0,
                    max_value=100,
                    value=0,
                    step=5
                )
            
            with adv_cols[3]:
                # Search
                filters['search'] = st.text_input(
                    "Search",
                    placeholder="Ticker or Company"
                )
        
        return filters
    
    @staticmethod
    def apply_filters(df: pd.DataFrame, filters: Dict[str, Any]) -> pd.DataFrame:
        """Apply filters with intelligent logic"""
        if df.empty:
            return df
        
        filtered = df.copy()
        
        # Basic filters
        if filters.get('tag') and filters['tag'] != 'All' and 'tag' in filtered.columns:
            filtered = filtered[filtered['tag'] == filters['tag']]
        
        if filters.get('min_score') and 'final_score' in filtered.columns:
            filtered = filtered[filtered['final_score'] >= filters['min_score']]
        
        if filters.get('edges_only') and 'has_edge' in filtered.columns:
            filtered = filtered[filtered['has_edge'] == True]
        
        if filters.get('anomalies') and 'anomaly' in filtered.columns:
            filtered = filtered[filtered['anomaly'] == True]
        
        # Advanced filters
        if filters.get('sector') and 'sector' in filtered.columns:
            filtered = filtered[filtered['sector'].isin(filters['sector'])]
        
        if filters.get('min_volume') and 'vol_ratio_1d_90d' in filtered.columns:
            filtered = filtered[filtered['vol_ratio_1d_90d'] >= filters['min_volume']]
        
        if filters.get('min_upside') and 'upside_pct' in filtered.columns:
            filtered = filtered[filtered['upside_pct'] >= filters['min_upside']]
        
        if filters.get('search') and filters['search'].strip():
            search_term = filters['search'].upper()
            mask = pd.Series([False] * len(filtered))
            
            if 'ticker' in filtered.columns:
                mask |= filtered['ticker'].str.upper().str.contains(search_term, na=False)
            if 'company_name' in filtered.columns:
                mask |= filtered['company_name'].str.upper().str.contains(search_term, na=False)
            
            filtered = filtered[mask]
        
        return filtered

# ============================================================================
# FILE: dashboard_views.py
# ============================================================================
"""Different view modes for the dashboard"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from typing import Dict, List, Any

class DashboardViews:
    """Multiple view modes for different trading styles"""
    
    @staticmethod
    def render_power_trader_view(df: pd.DataFrame, config: Dict) -> None:
        """Ultra-compact view for power traders"""
        st.markdown("### ⚡ Power Trader View")
        
        # Key columns for traders
        trader_cols = ['ticker', 'tag', 'final_score', 'price', 'target_price', 
                      'upside_pct', 'edge_types', 'vol_ratio_1d_90d', 'ret_1d', 'ret_7d']
        
        available_cols = [col for col in trader_cols if col in df.columns]
        
        # Custom column config for trader view
        column_config = {
            "ticker": st.column_config.TextColumn("Symbol", width=80),
            "tag": st.column_config.TextColumn("Signal", width=60),
            "final_score": st.column_config.ProgressColumn("Score", width=80, format="%.0f"),
            "price": st.column_config.NumberColumn("Price", width=80, format="₹%.0f"),
            "target_price": st.column_config.NumberColumn("Target", width=80, format="₹%.0f"),
            "upside_pct": st.column_config.NumberColumn("Up%", width=60, format="%.0f%%"),
            "vol_ratio_1d_90d": st.column_config.NumberColumn("Vol", width=50, format="%.1f"),
            "ret_1d": st.column_config.NumberColumn("1D", width=50, format="%+.1f%%"),
            "ret_7d": st.column_config.NumberColumn("7D", width=50, format="%+.1f%%")
        }
        
        # Display with row coloring
        st.dataframe(
            df[available_cols],
            use_container_width=True,
            height=600,
            column_config=column_config,
            hide_index=True
        )
    
    @staticmethod
    def render_analyst_view(df: pd.DataFrame, sector_scores: pd.DataFrame) -> None:
        """Comprehensive analytical view"""
        col1, col2 = st.columns([3, 2])
        
        with col1:
            st.markdown("### 📊 Market Structure")
            
            # Sector performance heatmap
            if not sector_scores.empty and 'sector' in df.columns:
                sector_perf = df.groupby('sector').agg({
                    'final_score': 'mean',
                    'ticker': 'count'
                }).round(1)
                
                fig = go.Figure(data=go.Heatmap(
                    z=sector_perf['final_score'].values.reshape(-1, 1),
                    y=sector_perf.index,
                    colorscale='RdYlGn',
                    text=sector_perf['final_score'].values.reshape(-1, 1),
                    texttemplate='%{text}',
                    colorbar=dict(title="Avg Score")
                ))
                
                fig.update_layout(
                    height=400,
                    title="Sector Performance Heatmap",
                    xaxis=dict(visible=False)
                )
                
                st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.markdown("### 📈 Signal Distribution")
            
            if 'tag' in df.columns:
                tag_dist = df['tag'].value_counts()
                
                fig = px.pie(
                    values=tag_dist.values,
                    names=tag_dist.index,
                    color_discrete_map={'Buy': '#0f9d58', 'Watch': '#f9ab00', 'Avoid': '#ea4335'},
                    hole=0.4
                )
                
                fig.update_layout(height=400)
                st.plotly_chart(fig, use_container_width=True)
    
    @staticmethod
    def render_quant_view(df: pd.DataFrame) -> None:
        """Quantitative analysis view"""
        st.markdown("### 🔬 Quantitative Analysis")
        
        # Score distribution
        col1, col2 = st.columns(2)
        
        with col1:
            if 'final_score' in df.columns:
                fig = px.histogram(
                    df,
                    x='final_score',
                    nbins=20,
                    title="Score Distribution",
                    labels={'final_score': 'Final Score', 'count': 'Count'},
                    color_discrete_sequence=['#1a73e8']
                )
                fig.update_layout(height=300)
                st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            if all(col in df.columns for col in ['ret_7d', 'vol_ratio_1d_90d']):
                fig = px.scatter(
                    df.head(100),
                    x='ret_7d',
                    y='vol_ratio_1d_90d',
                    color='tag' if 'tag' in df.columns else None,
                    size='final_score' if 'final_score' in df.columns else None,
                    title="Return vs Volume",
                    labels={'ret_7d': '7D Return %', 'vol_ratio_1d_90d': 'Volume Ratio'},
                    color_discrete_map={'Buy': '#0f9d58', 'Watch': '#f9ab00', 'Avoid': '#ea4335'}
                )
                fig.update_layout(height=300)
                st.plotly_chart(fig, use_container_width=True)

# ============================================================================
# FILE: streamlit_dashboard.py (MAIN)
# ============================================================================
"""
MANTRA ELITE DASHBOARD - Main Application
The definitive stock intelligence platform
"""

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import time

# Import all modules
from dashboard_config import DASHBOARD_CONFIG, COLUMN_DEFINITIONS
from ui_components import UIComponents
from data_pipeline import DataPipeline
from dashboard_filters import DashboardFilters
from dashboard_views import DashboardViews

# Page configuration
st.set_page_config(
    page_title="M.A.N.T.R.A. Elite | Stock Intelligence",
    page_icon="🚀",
    layout="wide",
    initial_sidebar_state="collapsed"
)

def initialize_session_state():
    """Initialize session state variables"""
    if 'initialized' not in st.session_state:
        st.session_state.initialized = True
        st.session_state.last_refresh = datetime.now()
        st.session_state.view_mode = "Power Trader"
        st.session_state.selected_stocks = []

def render_sidebar(df: pd.DataFrame, summary: Dict) -> str:
    """Render the sidebar with controls and info"""
    with st.sidebar:
        st.markdown("## ⚙️ Control Panel")
        
        # View mode selector
        view_mode = st.selectbox(
            "📊 View Mode",
            options=["Power Trader", "Analyst", "Quant", "Custom"],
            index=0
        )
        
        # Market regime
        regime = st.selectbox(
            "🎯 Market Regime",
            options=["balanced", "momentum", "value", "growth", "volume"],
            index=0
        )
        
        # System info
        st.markdown("### 📊 System Status")
        st.metric("Stocks", f"{summary.get('total_stocks', 0):,}")
        st.metric("Last Update", f"{st.session_state.last_refresh:%H:%M:%S}")
        
        # Refresh button
        if st.button("🔄 Refresh", use_container_width=True):
            st.cache_data.clear()
            st.session_state.last_refresh = datetime.now()
            st.rerun()
        
        # Export section
        st.markdown("### 💾 Export")
        export_format = st.radio("Format", ["Excel", "CSV"], horizontal=True)
        
        return view_mode, regime, export_format

def render_spotlight_cards(df: pd.DataFrame) -> None:
    """Render spotlight opportunity cards"""
    st.markdown("### 🎯 Spotlight Opportunities")
    
    # Get top opportunities
    if 'priority_score' in df.columns:
        top_opps = df.nlargest(8, 'priority_score')
    elif 'final_score' in df.columns:
        top_opps = df[df['tag'] == 'Buy'].nlargest(8, 'final_score') if 'tag' in df.columns else df.nlargest(8, 'final_score')
    else:
        top_opps = df.head(8)
    
    if top_opps.empty:
        st.info("No opportunities match current filters")
        return
    
    # Create 2 rows of 4 cards
    for row in range(0, len(top_opps), 4):
        cols = st.columns(4)
        for idx, (_, stock) in enumerate(top_opps.iloc[row:row+4].iterrows()):
            if idx < len(cols):
                with cols[idx]:
                    # Determine card color based on score
                    score = stock.get('final_score', 0)
                    if score >= 85:
                        border_color = "#0f9d58"
                        bg_gradient = "linear-gradient(135deg, #0f9d5822 0%, #0f9d5811 100%)"
                    elif score >= 70:
                        border_color = "#1a73e8"
                        bg_gradient = "linear-gradient(135deg, #1a73e822 0%, #1a73e811 100%)"
                    else:
                        border_color = "#f9ab00"
                        bg_gradient = "linear-gradient(135deg, #f9ab0022 0%, #f9ab0011 100%)"
                    
                    # Edge indicator
                    edge_indicator = "⚡" if stock.get('has_edge', False) else ""
                    
                    # Render card
                    st.markdown(f"""
                    <div style="background: {bg_gradient}; 
                                border: 2px solid {border_color}; 
                                border-radius: 12px; 
                                padding: 15px;
                                height: 150px;
                                position: relative;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <h4 style="margin: 0; color: {border_color};">{stock['ticker']} {edge_indicator}</h4>
                            <span style="background: {border_color}; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">
                                {stock.get('tag', 'N/A')}
                            </span>
                        </div>
                        <p style="margin: 5px 0; font-size: 11px; color: #888; height: 30px; overflow: hidden;">
                            {stock.get('company_name', 'N/A')[:40]}...
                        </p>
                        <h2 style="margin: 10px 0; color: {border_color}; font-size: 28px;">
                            {score:.0f}
                        </h2>
                        <div style="display: flex; justify-content: space-between; font-size: 13px;">
                            <span>₹{stock.get('price', 0):.0f}</span>
                            <span style="color: #0f9d58;">↑{stock.get('upside_pct', 0):.0f}%</span>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)

def main():
    """Main application entry point"""
    # Initialize
    initialize_session_state()
    UIComponents.inject_theme()
    
    # Header
    UIComponents.render_header()
    
    # Load data
    start_time = time.time()
    df, sector_scores, summary = DataPipeline.load_and_process_all()
    load_time = time.time() - start_time
    
    # Store available sectors in session state
    if 'sector' in df.columns:
        st.session_state.available_sectors = sorted(df['sector'].dropna().unique().tolist())
    
    # Sidebar
    view_mode, regime, export_format = render_sidebar(df, summary)
    
    # Filter bar
    filters = DashboardFilters.render_filter_bar()
    filtered_df = DashboardFilters.apply_filters(df, filters)
    
    # Quick stats
    UIComponents.render_quick_stats(df, filtered_df)
    
    # Performance indicator
    st.caption(f"⚡ Loaded {len(df):,} stocks in {load_time:.2f}s")
    
    # Main content area
    if view_mode == "Power Trader":
        # Spotlight cards
        render_spotlight_cards(filtered_df)
        
        # Main data table
        st.markdown("### 📊 Full Scanner")
        DashboardViews.render_power_trader_view(filtered_df, COLUMN_DEFINITIONS)
        
    elif view_mode == "Analyst":
        # Analyst view with multiple perspectives
        render_spotlight_cards(filtered_df)
        DashboardViews.render_analyst_view(filtered_df, sector_scores)
        
        # Data table below
        st.markdown("### 📋 Detailed Analysis")
        st.dataframe(filtered_df, use_container_width=True, height=400)
        
    elif view_mode == "Quant":
        # Quantitative analysis
        DashboardViews.render_quant_view(filtered_df)
        
        # Statistical summary
        st.markdown("### 📊 Statistical Summary")
        if not filtered_df.empty:
            stats_df = filtered_df.describe()
            st.dataframe(stats_df, use_container_width=True)
    
    # Export functionality
    if not filtered_df.empty:
        st.markdown("---")
        col1, col2, col3 = st.columns([1, 1, 3])
        
        with col1:
            if export_format == "Excel":
                import io
                buffer = io.BytesIO()
                with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                    filtered_df.to_excel(writer, sheet_name='Scanner', index=False)
                    if not sector_scores.empty:
                        sector_scores.to_excel(writer, sheet_name='Sectors', index=False)
                
                st.download_button(
                    "📥 Download Excel",
                    data=buffer.getvalue(),
                    file_name=f"MANTRA_Elite_{datetime.now():%Y%m%d_%H%M}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
        
        with col2:
            if export_format == "CSV":
                csv = filtered_df.to_csv(index=False)
                st.download_button(
                    "📥 Download CSV",
                    data=csv,
                    file_name=f"MANTRA_Elite_{datetime.now():%Y%m%d_%H%M}.csv",
                    mime="text/csv"
                )
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666; font-size: 12px;">
        <p>M.A.N.T.R.A. Elite v3.0 | Real Alpha, Real Time | Data Hash: {}</p>
    </div>
    """.format(summary.get('data_hash', 'N/A')[:8]), unsafe_allow_html=True)

if __name__ == "__main__":
    main()
